let smarts = require('smarts')()
let Rates = require('rates')()

module.exports = async function(args){

	// convert all USD prices to AUD
	let rates = await Rates
	let prices = smarts.getsmart(args, 'obj.prices', [])
	let round = 100
	let	minimumPrice = {
		values: {
			AUD: Infinity
		}
	}
	let nativePriceName = 'growlights.com.au marked up price'
	let nativePrice = undefined
	
	// convert USD value to AUD for all prices
	// find native price if it exists
	// find minimum price that isn't a native price
	for(let price of prices){
		if(price.values['USD']){
			// check if exchange rate is available
			if(rates[`USD_AUD`] && rates[`USD_AUD`].val){
				// update AUD value with latest exchange rate
				price.values['AUD'] = Math.ceil(rates[`USD_AUD`].val * price.values['USD'])
			}
		}
		// check if price is minimum
		if(price.name !== nativePriceName && price.values['AUD'] && price.values['AUD'] < minimumPrice.values['AUD']){
			minimumPrice = price
		}
		// check for native price object
		if(price.name == nativePriceName){
			nativePrice = price
		}
	}
	if(!nativePrice){
		nativePrice = {
			name: nativePriceName,
			values: {
				'AUD': undefined
			}
		}
		prices.push(nativePrice)
	}
	// update native price with marked up minimum remote price
	nativePrice.values['AUD'] = minimumPrice.values['AUD'] * 1.5	
	nativePrice.source = minimumPrice.source

	return args.obj
}